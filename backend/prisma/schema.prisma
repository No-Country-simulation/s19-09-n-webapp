// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

enum PropertyType {
  APARTMENT
  ROOM
  HOUSE
}

enum RentalPeriod {
  WEEKLY
  MONTHLY
  TRIMESTERLY
  HALF_YEARLY
  YEARLY
}

enum RoomType {
  BEDROOM
  KITCHEN
  LIVING
  DINNING
  LAUNDRY
  STUDY
  GARAGE
  BATHROOM
}

enum ServiceType {
  INTERNET
  WATER
  CLEANING
  WASHING_MACHINE
  AIR_CONDITIONER
  HEATER
}

model User {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(64)
  last_name      String   @db.VarChar(64)
  email          String   @unique @db.VarChar(64)
  email_verified Boolean  @default(false)
  password       String   @db.VarChar(255)
  is_owner       Boolean  @default(false)
  deleted        Boolean  @default(false)
  role           Role     @default(USER)
  remember_token String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@index([email])
}

model Property {
  id                    String                @id @default(uuid())
  title                 String                @db.VarChar(255) 
  address               String                @db.VarChar(255)
  city                  String                @db.VarChar(64)
  property_type         PropertyType          @default(ROOM)
  max_occupants         Int                   @db.SmallInt()
  payment_by_period     Decimal               @db.Decimal(10,2)
  min_rental_period     RentalPeriod          @default(MONTHLY)
  rooms                 RoomsOnProperty[]
  services              ServicesOnProperty[]        
  is_furnished          Boolean               @default(false)
  is_services_included  Boolean               @default(false)
  rating                Int                   @db.SmallInt()
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  location_id           String                @unique
  location              Location?             @relation(fields: [location_id], references: [id])            
  near_universities     NearLocation[]
  photos                PropertyPhoto[]        

  @@index([min_rental_period, payment_by_period, is_furnished, is_services_included, rating])
}

model Room {
  id        String    @id @default(uuid())
  type      RoomType  
  quantity  Int       @default(1) @db.SmallInt 
  properties  RoomsOnProperty[]

  @@unique([type,quantity])
}

model RoomsOnProperty {
  property_id   String    
  property      Property   @relation(fields: [property_id], references: [id])  
  room_id       String     
  room          Room       @relation(fields: [room_id], references: [id])

  @@id([property_id, room_id])  
}

model Service {
  id          String                @id @default(uuid())
  type        ServiceType           @unique
  properties  ServicesOnProperty[]
}

model ServicesOnProperty {
  property_id   String    
  property  Property      @relation(fields: [property_id], references: [id])  
  service_id   String     
  service  Service        @relation(fields: [service_id], references: [id])  

  @@id([property_id, service_id])
}

model Location{
  id           String     @id @default(uuid())
  latitude     Decimal    @db.Decimal(10,6)
  longitud     Decimal    @db.Decimal(10,6)
  property     Property?
  university   University?

  @@unique([latitude,longitud])
}


model University{
  id                String                @id @default(uuid())
  name              String                @db.VarChar(255)
  location_id       String                @unique
  location          Location              @relation(fields: [location_id], references: [id])   
  near_properties   NearLocation[]               
}

model NearLocation{
  id              String       @id @default(uuid())
  distance        Int          @db.Integer()
  property_id     String       @unique
  property        Property     @relation(fields: [property_id], references: [id])
  university_id   String       @unique
  university      University   @relation(fields: [university_id], references: [id])

  @@unique([property_id,university_id])
}

model PropertyPhoto{
id            String      @id @default(uuid())
photo_url     String      @db.Text
property_id   String      @unique
property      Property    @relation(fields: [property_id],references: [id])

}